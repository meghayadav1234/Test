import java.util.HashMap;
class Age
{
  private int day;
  private int month;
  private int year;

  public int getDay ()
  {
    return day;
  }
  public void setDay (int day)
  {
    this.day = day;
  }
  public int getMonth ()
  {
    return month;
  }
  public void setMonth (int month)
  {
    this.month = month;
  }
  public int getYear ()
  {
    return year;
  }
  public void setYear (int year)
  {
    this.year = year;
  }
}

final class ImmutableStudent
{
  private final int id;
  private final String name;
  private final Age age;
  private final HashMap < Integer, String > hashMap;

  public ImmutableStudent (int id, String name, Age age, HashMap hashMap)
  {
    this.name = name;
    this.id = id;
    this.age = age;
    this.hashMap = hashMap;
  }
  
  public int getId ()
  {
    return id;
  }

  public String getName ()
  {
    return name;
  }

  public Age getAge ()
  {
    Age cloneAge = new Age ();
    cloneAge.setDay (this.age.getDay ());
    cloneAge.setMonth (this.age.getMonth ());
    cloneAge.setYear (this.age.getYear ());
    return cloneAge;
  }
  public HashMap getHashMap ()
  {
    HashMap < Integer, String > h = new HashMap < Integer, String > ();
    h.putAll (this.hashMap);
    return h;
  }
}

class Main
{

  public static void main (String[]args)
  {
    Age age = new Age ();
      age.setDay (1);
      age.setMonth (1);
      age.setYear (1992);
      HashMap < String, String > h1 = new HashMap < String, String > ();
      h1.put ("1", "first");
      h1.put ("2", "second");
    ImmutableStudent student =  new ImmutableStudent (1, "Alex", age, h1);
      System.out.println ("Alex age year before modification = " +
			  student.getAge ().getYear ());
      student.getAge ().setYear (1993);
      System.out.println ("Alex age year after modification = " +
			  student.getAge ().getYear ());

      System.out.println ("before modification = " + student.getHashMap ());
      student.getHashMap ().put (1, "112545");
      System.out.println ("after modification = " + student.getHashMap ());
  }
}
